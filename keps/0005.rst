KEP 5: Karaage 4
================

:Created: 2015-03-17
:Author: Brian May
:Status: Draft

.. contents:: :local:

.. sectnum::

Overview
--------
This document outlines the path for the future of Karaage, including Karaage 4.

This doesn't isn't an official V3 Alliance document and doesn't reflect V3's
official position with Karaage. It is draft status only, and the contents may
change without notice.

Contributions are welcome.


Background
----------
Karaage is a cluster management system initially developed by VPAC (now V3
Alliance), and is in use by numerous organisations around Australia. As a major
piece of infrastructure software, it has been unfortunately, lagging with
respect to innovation and development of new features. Currently the majority
of code development is tied to one individual, with minimal input from other
stakeholders.

V3 Alliance has been installing Karaage at clusters setup for V3's clients.
Unfortunately these sites often get deployed without any sort of maintenance
plan. This results in clients repeatedly encountering known bugs that
have been fixed in the latest Karaage version, which in turn gives
Karaage a bad look.

One of these sites was VLSCI. VLSCI started encountering limitations of
Karaage.  As a result, they employed Common Code to deliver a set of features.
Common Code produced a new schema for Karaage, however were unable to produce
the new views to take advantage of this new schema in the time allowed.

A related issue that has risen is the need to pay for Karaage development.
Development is an expensive process, and there is no funding model to
continue the development of Karaage.


Current Progress
----------------
There were a number of issues with the Common Code repository. These changes
were cleaned up into a set of well formed patches, and these applied against
Karaage 3 to create the new official Karaage4 branch.

Karaage 4 requires Django 1.7, which means Django south migrations will not
work any more. This means that installations must upgrade to Karaage 3 first
before upgrading to Karaage 4.

The next two sections describe these changes in detail.


Rationale - Merged
------------------
This section documents the changes that have been merged in Karaage 4 with the
rationale as to why the changes have been considered a good idea.

Currently this section only documents significant changes, e.g. changes to
database models. It does not worry about adding additional methods or bug
fixes.

.. contents:: :local:

Unique Groups
~~~~~~~~~~~~~
``Institute``, ``Project``, and ``Software`` previously referenced groups
using:

.. code-block:: python

    group = models.ForeignKey(Group)

This has now been changed to:

.. code-block:: python

    group = models.OneToOneField(Group, unique=True)


This change means every group can only be used  by one ``Institute``, by one
``Project``, a and by one piece of ``Software``.

This makes sense because it simplifies the code, and it is typically an error
condition to have one ``Group`` used in by different things.

This change does not prevent a ``Group`` from being used by one one
``Institute``, by one ``Project``, and by one piece of ``Software`` all at the
same time. For that, see the proposed change, `Group Parent`_.

Git commits:

* `335332b03dd1ba5ea53f97482329809ec2f34b61 <https://github.com/Karaage-Cluster/karaage/commit/335332b03dd1ba5ea53f97482329809ec2f34b61>`_
* `02bb0a63f10e994656f44ff8ac9ae14ef87c84b9 <https://github.com/Karaage-Cluster/karaage/commit/02bb0a63f10e994656f44ff8ac9ae14ef87c84b9>`_

Use of Audit Log
~~~~~~~~~~~~~~~~
The audit log plugin creates a duplicate database table for every model that
records historic information for the models. 

It's use may mean that adhoc methods used in Karaage to record historic
information may not be required anymore, and should possibly be refactored.

AuitLog has not yet been applied to the ``Person`` model.

Proposed changes:

* Add AuditLog to the ``Person`` model.

Git commits:

* `694b9224320bfd8a22aace60fc9f7c08dc2fbc6e <https://github.com/Karaage-Cluster/karaage/commit/694b9224320bfd8a22aace60fc9f7c08dc2fbc6e>`_
* `8b7f0c7e61dbea679ecabe29a717156b2c0f62fc <https://github.com/Karaage-Cluster/karaage/commit/8b7f0c7e61dbea679ecabe29a717156b2c0f62fc>`_
* and others


CareerLevel model
~~~~~~~~~~~~~~~~~

.. code-block:: python

    @python_2_unicode_compatible
    class CareerLevel(models.Model):
        level = models.CharField(max_length=255)

        audit_log = AuditLog()

        def __str__(self):
            return self.level

        class Meta:
            ordering = ['level']
            app_label = 'karaage'

    @python_2_unicode_compatible
    class Person(AbstractBaseUser):
        career_level = models.ForeignKey(
            'karaage.CareerLevel',
            blank=False,  # don't allow saving without filling this in...
            null=True,  # ...but do allow legacy records in DB to be NULL
        )

        ...

The ``CareerLevel`` table is used to specify the job title of the Person.

Proposed changes:

* Set unique=True on ``level``.

Git commits:

* `5558119d155de9e3629c6940adb84f25c9920aac <https://github.com/Karaage-Cluster/karaage/commit/5558119d155de9e3629c6940adb84f25c9920aac>`_

ProjectLevel model
~~~~~~~~~~~~~~~~~~

.. code-block:: python

    @python_2_unicode_compatible
    class ProjectLevel(models.Model):
        level = models.CharField(max_length=255)

        audit_log = AuditLog()

        def __str__(self):
            return self.level

        class Meta:
            ordering = ['level']
            app_label = 'karaage'

The ``ProjectLevel`` table is required to indicate a ``Persons`` level within a
``Project``.

Proposed changes:

* Set unique=True on ``level``.

Git commits:

* `fae218bf10f612b001793f227abbceaff6e42a26 <https://github.com/Karaage-Cluster/karaage/commit/fae218bf10f612b001793f227abbceaff6e42a26>`_


ProjectMembership model
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    @python_2_unicode_compatible
    class ProjectMembership(models.Model):

        """
        Mapping between projects and people with details about their project role.

        TODO: Automatic update project membership using signals from Group.members,
        using defaults defined below.
        """

        person = models.ForeignKey('karaage.Person')
        project = models.ForeignKey('karaage.Project')
        project_level = models.ForeignKey(
            'karaage.ProjectLevel',
            blank=False,  # don't allow saving without filling this in...
            null=True,  # ...but do allow legacy records in DB to be NULL
        )
        is_project_supervisor = models.BooleanField(default=False)
        is_project_leader = models.BooleanField(default=False)
        is_default_project = models.BooleanField(default=False)
        is_primary_contact = models.BooleanField(default=False)

        class Meta:
            app_label = 'karaage'
            unique_together = (
                'person', 'project',
            )

        def __str__(self):
            return '{} @ {}'.format(self.person, self.project)

     @python_2_unicode_compatible
     class Person(AbstractBaseUser):
        projects = models.ManyToManyField(
            'karaage.Project',
            through='karage.ProjectMembership',
            through_fields=('person', 'project'),
        )

        ...



The ``ProjectMembership`` table is required to keep track of additional
information for every ``Person`` in a particular ``Project``. This includes the
``ProjectLevel`` and the person's role inside the project. A ``Person`` can be
a supervisor or leader of a ``Project``. A ``Person`` can nominate a
``Project`` as a default project. A ``Person`` can be designated the primary
contact for the ``Project``.

Git commits:

* `7a9be9a3df920d16fb77e18b268d037ac4531b7b <https://github.com/Karaage-Cluster/karaage/commit/7a9be9a3df920d16fb77e18b268d037ac4531b7b>`_



Project model
~~~~~~~~~~~~~

.. code-block:: python

    class Project(MPTTModel):

        ...

        # MPTT fields
        parent = TreeForeignKey(
            'self', null=True, blank=True, related_name='children')
        lft = models.PositiveIntegerField(db_index=True, editable=False)
        rght = models.PositiveIntegerField(db_index=True, editable=False)
        tree_id = models.PositiveIntegerField(db_index=True, editable=False)
        level = models.PositiveIntegerField(db_index=True, editable=False)

        ...

The ``Project`` hierarchy, using the MPTT library. This basically, replaces the
current ``Institute`` model, although this remains for now. The top level
``Projects`` would be the ``Institutes``, and the descendants the ``Projects``
belonging to these ``Institutes``. This means usage can be assigned to a
``Project``, and this will work even if the ``Project`` is an ``Institute``.

Git commits:

* `b14ae1dec77a7323f9da49a5708df01c5d77c6ad <https://github.com/Karaage-Cluster/karaage/commit/b14ae1dec77a7323f9da49a5708df01c5d77c6ad>`_

Schemes model
~~~~~~~~~~~~~

.. code-block:: python

    class Scheme(models.Model):
        name = models.CharField(max_length=200, unique=True)
        description = models.CharField(max_length=200, null=False, blank=True)
        opened = models.DateField()
        closed = models.DateField(null=True, blank=True)

        objects = models.Manager()
        active = ActiveSchemeManager()
        deleted = DeletedSchemeManager()

        audit_log = AuditLog()

        def __str__(self):
            return self.name

        class Meta:
            ordering = ['name']
            app_label = 'karaage'

The ``Scheme`` defines a source of grants over a specific period of time.

Git commits:

* `0173243e1c0b7b8fccf44444b429a56b0c6825d8 <https://github.com/Karaage-Cluster/karaage/commit/0173243e1c0b7b8fccf44444b429a56b0c6825d8>`_


ResourcePool model
~~~~~~~~~~~~~~~~~~

.. code-block:: python

    class ResourcePool(models.Model):
        name = models.CharField(max_length=255, unique=True)

        audit_log = AuditLog()

        def __str__(self):
            return self.name

        class Meta:
            ordering = ['name']
            app_label = 'karaage'


Karaage 4 supports tracking information other then CPU hours. This is done
by defining a ``ResourcePool`` for every metric we want to track.

All ``Resources`` in the resource pool should use the same units. So mixing
Disk Space and CPU hours in the one ResourcePool is not valid.

Notes:

* The ``ResourcePools`` can have two different sets of properties. e.g. CPU
  hours is accumulative and each new entry will add to the previous total.
  Where as with disk space, we are more concerned about the maximum about of
  disk space used at any one time. There should perhaps be an extra field added
  to distinguish the two different cases.

Proposed changes:

* Add ``resource-units`` field. This can be, ``megabytes`` and ``CPU Hours``.
  More units can be added later.
* Add ``resource_function`` field. This can be set to ``average``, ``minimum``,
  ``maximum``, ``last``, and ``sum``. For example with disk space it would be
  ``maximum`` and for cpu usage it would be ``sum``.

Git commits:

* `0173243e1c0b7b8fccf44444b429a56b0c6825d8 <https://github.com/Karaage-Cluster/karaage/commit/0173243e1c0b7b8fccf44444b429a56b0c6825d8>`_


Resource model
~~~~~~~~~~~~~~

.. code-block:: python

    class Resource(models.Model):

        class ResourceType:
            SLURM_CPU = 'slurm_cpu'
            SLURM_MEM = 'slurm_mem'
            GPFS = 'gpfs'

        RESOURCE_TYPE_CHOICES = [
            (ResourceType.SLURM_CPU, 'Slurm (CPU)'),
            (ResourceType.SLURM_MEM, 'Slurm (MEM)'),
            (ResourceType.GPFS, 'GPFS'),
        ]

        machine = models.ForeignKey('karaage.Machine')
        resource_pool = models.ForeignKey('karaage.ResourcePool')
        scaling_factor = models.FloatField()
        resource_type = models.CharField(
            max_length=255,
            choices=RESOURCE_TYPE_CHOICES,
        )
        quantity = models.BigIntegerField()

        audit_log = AuditLog()

        def __str__(self):
            return '%s / %s @ %s' % (
                self.machine,
                self.resource_type,
                self.resource_pool
            )

        class Meta:
           ordering = ['resource_type']
           app_label = 'karaage'


The ``Resource`` model defines how we track a ``ResourcePool`` for a given
``Machine``.

Notes:

* The ``resource_type`` is set here, so a ``ResourcePool`` could have different
  types for different ``Machines``.
* Either find the  the purpose of the ``resource_type`` field or remove it.
* The quantity field should allow NULL, it doesn't make sense for CPU Hours.
* A single ``machine`` could have multiple Resources for one ``resource_pool``,
  e.g. multiple filesystems.

Proposed changes:

* Quantity can be NULL.
* Remove ``resource_type`` field.
* These attributes should be part of the ``unique_together`` attribute.

  * ``resource_pool``
  * ``resource_name``
  * ``machine``

Git commits:

* `0173243e1c0b7b8fccf44444b429a56b0c6825d8 <https://github.com/Karaage-Cluster/karaage/commit/0173243e1c0b7b8fccf44444b429a56b0c6825d8>`_


Grant model
~~~~~~~~~~~

.. code-block:: python

    class Grant(models.Model):
        project = models.ForeignKey('karaage.Project')
        scheme = models.ForeignKey('karaage.Scheme')
        description = models.CharField(max_length=255)
        date = models.DateField()
        begins = models.DateField()
        expires = models.DateField()

        audit_log = AuditLog()

        def __str__(self):
            return self.description

        class Meta:
            ordering = [
                '-expires',
                '-project__end_date',
                'project__name',
                'description',
            ]
            app_label = 'karaage'

The ``Grant`` defines an allowance of ``Resources`` from a ``Scheme`` for a
specific ``Project`` for a specific duration. It does not define what those
resources are.

Notes:

* Although strange, it is possible to have multiple grants from the same
  ``scheme`` for the same ``project`` at overlapping times.

Git commits:

* `9677dfb6f1ae37f19a1622a465ede9a9c8527635 <https://github.com/Karaage-Cluster/karaage/commit/9677dfb6f1ae37f19a1622a465ede9a9c8527635>`_


AllocationPool model
~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    class AllocationPool(models.Model):

        """
        Grouping of resources allocated to a grant (project).

        AllocationMode='capped' is not supported yet, until a demonstratted need is
        shown (and optionally that we can use an array of foreign key to relate
        from Usage to AllocationPool to avoid the M2M join table).

        TODO: User documentation of the allocation behaviour with concrete
        examples.
        """

        project = models.ForeignKey('karaage.Project')
        period = models.ForeignKey('karaage.AllocationPeriod')
        resource_pool = models.ForeignKey('karaage.ResourcePool')

        @cached_property
        def allocated(self):
            return self.allocation_set.aggregate(
                a=models.Sum('quantity'))['a'] or 0.0

        @cached_property
        def used(self):
            return self.usage_set.aggregate(u=models.Sum('used'))['u'] or 0.0

        @cached_property
        def raw_used(self):
            return self.usage_set.aggregate(r=models.Sum('raw_used'))['r'] or 0.0

        @cached_property
        def used_percent(self):
            if self.allocated == 0.0:
                return None
            return 100.0 * self.used / self.allocated

        @cached_property
        def remaining(self):
            return self.allocated - self.used

        objects = AllocationPoolQuerySet.as_manager()
        audit_log = AuditLog()

        def __str__(self):
            return 'Project: %s' % self.project.name

        class Meta:
            ordering = [
                '-period__end',
                '-project__end_date',
                'project__name',
            ]
            app_label = 'karaage'

The ``AllocationPool`` defines a ledger containing ``Allocations`` and
``Usage`` entries for a particular ``ResourcePool`` and provides methods for
working out totals.

Proposed changes:

* Set ``unique_together`` to:

  * ``project``
  * ``period``
  * ``resource_pool``

  i.e. is it an acceptable constraint that there is only one ``AllocationPool``
  for every ``Project`` for a given ``AllocationPeriod`` and ``ResourcePool``.

Git commits:

* `9677dfb6f1ae37f19a1622a465ede9a9c8527635 <https://github.com/Karaage-Cluster/karaage/commit/9677dfb6f1ae37f19a1622a465ede9a9c8527635>`_


Allocation model
~~~~~~~~~~~~~~~~

.. code-block:: python

    class Allocation(models.Model):
        description = models.CharField(max_length=100)
        grant = models.ForeignKey('karaage.Grant')
        allocation_pool = models.ForeignKey('karaage.AllocationPool')
        quantity = models.FloatField()

        audit_log = AuditLog()

        def __str__(self):
            return self.description

        class Meta:
            ordering = [
                'allocation_pool',
            ]
            app_label = 'karaage'

The ``Allocation`` defines an entry in a ``AllocationPool`` ledger that
adds to the available value.

Git commits:

* `9677dfb6f1ae37f19a1622a465ede9a9c8527635 <https://github.com/Karaage-Cluster/karaage/commit/9677dfb6f1ae37f19a1622a465ede9a9c8527635>`_


AllocationPeriod model
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

    class AllocationPeriod(models.Model):
        name = models.CharField(max_length=255)
        start = models.DateTimeField()
        end = models.DateTimeField()

        audit_log = AuditLog()

        def __str__(self):
            return self.name

        class Meta:
            ordering = [
                '-end',
                'name',
            ]
            app_label = 'karaage'


Defines a period between two dates.

Proposed change:

* Name should have unique=True set.

Git commits:

* `9677dfb6f1ae37f19a1622a465ede9a9c8527635 <https://github.com/Karaage-Cluster/karaage/commit/9677dfb6f1ae37f19a1622a465ede9a9c8527635>`_



allocation_mode attribute
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

 @python_2_unicode_compatible
 class Project(MPTTModel):

    class AllocationMode:
        PRIVATE = 'private'
        SHARED = 'shared'
        # CAPPED = 'capped'

    ALLOCATION_MODE_CHOICES = [
        (
            AllocationMode.PRIVATE,
            'Private (this project only)',
        ),
        (
            AllocationMode.SHARED,
            'Shared (this project and all sub-projects)',
        ),
        # (
        #     AllocationMode.CAPPED,
        #     'Capped (use parent allocation up to this amount)',
        # ),
    ]

    allocation_mode = models.CharField(
        max_length=20,
        choices=ALLOCATION_MODE_CHOICES,
        default=AllocationMode.PRIVATE,
    )

    ...

Notes:

* This is an important distinction I don't understand.
* When job is submitted, we get the ``submitted_project``, however we need to
  get the ``allocated_project`` for this job.
* Check: If this project has an allocation, or if ``allocation_mode`` is
  private, or if there is no parent project we use this project as the
  ``allocated_project``. Otherwise (``allocation_mode`` is shared) we look at
  the parent project, and repeat the process.

Git commits:

* `93e13e00eb9997a1b5e73b9840900aac4056109c <https://github.com/Karaage-Cluster/karaage/commit/93e13e00eb9997a1b5e73b9840900aac4056109c>`_


Usage model
~~~~~~~~~~~

.. code-block:: python

    @python_2_unicode_compatible
    class Usage(models.Model):
        account = models.ForeignKey('karaage.Account')
        allocation_pool = models.ForeignKey('karaage.AllocationPool', null=True)
        allocation_period = models.ForeignKey(
            'karaage.AllocationPeriod', null=True)
        content_type = models.ForeignKey('contenttypes.ContentType')
        grant = models.ForeignKey('karaage.Grant', null=True)
        person_institute = models.ForeignKey(
            'karaage.Institute',
            related_name='person_institute',
            null=True,
        )
        project_institute = models.ForeignKey(
            'karaage.Institute',
            related_name='project_institute',
        )
        machine = models.ForeignKey('karaage.Machine')
        person = models.ForeignKey('karaage.Person', null=True)
        submitted_project = models.ForeignKey(
            'karaage.Project',
            related_name='submitted_usage',
        )
        allocated_project = models.ForeignKey(
            'karaage.Project',
            related_name='allocated_usage',
            null=True,
        )
        resource = models.ForeignKey('karaage.Resource')
        resource_pool = models.ForeignKey('karaage.ResourcePool', null=True)
        scheme = models.ForeignKey('karaage.Scheme', null=True)
        person_project_level = models.ForeignKey(
            'karaage.ProjectLevel',
            blank=True, null=True,  # legacy data doesn't have person project level
        )
        person_career_level = models.ForeignKey(
            'karaage.CareerLevel',
            blank=True, null=True,  # legacy data doesn't have person career level
        )
        count = models.PositiveIntegerField()
        created = models.DateTimeField(auto_now_add=True)
        description = models.CharField(max_length=255)
        range_start = models.DateTimeField()
        range_end = models.DateTimeField()
        raw_used = models.FloatField()
        used = models.FloatField()

        def __str__(self):
            return self.description

        class Meta:
            # Not using ordering so database planner is free to pick the
            # rows as they come.
            app_label = 'karaage'
            unique_together = (
                'range_start', 'range_end',
                'account', 'machine', 'submitted_project')


The aggregated ``Usage`` model is designed to speed up access to usage
information by aggregating it into one table, as well as make it independent of
the resource being monitored.

Notes:

* Should have a ``range_duration`` attribute?
* We do not keep track of the ``MachineCategory`` here. However we do keep
  track of the ``Machine``.
* What does ``project_institute`` point to? The ``submitted_project``.
* Have we got too much de-normalization?

  * ``person_project_level``
  * ``person_career_level``
  * ``person_institute``
  * ``project_institute``

  Do we really care what these values were at the time the job was run,
  as opposed to now? Answer: YES! We want to be able to search usage
  based on these attributes.

* These attributes don't need to be part of the ``unique_together`` attribute:

  * ``person`` - as the ``Person`` associated with an ``Account`` will never
    change.
  * ``resource_pool`` - calculated based on source of data.
  * ``resource`` - calculated from ``resource`` and ``machine``.
  * ``allocated_project`` - calculated from ``submitted_project``.
  * ``allocation_pool``  - calculated from ``allocated_project``.
  * ``allocation_period``  - calculated from ``allocation_pool``

* We can't implement automatic migration of data. Have migration triggered
  manually *after* upgrade to Karaage 1.4. This is because:

  * It is not possible to set ``content_type`` from within migrations, due to
    Django limitations.
  * We cannot automatically generate a ``scheme``, ``allocation_pool`` and
    ``allocation_period`` objects on upgrade that would make sense for all
    installs.

Proposed changes:

* Change ``range_start`` and ``range_end`` to ``Date`` fields.
* Move the ``content_type`` to the ``ResourcePool`` model.


* These attributes should added to the ``unique_together`` attribute.

  * ``person_project_level``
  * ``person_career_level``
  * ``person_institute``
  * ``project_institute``

  As these values could change within the same day.

* Remove ``scheme`` field should get removed. Recording the ``scheme`` here
  makes no sense. An ``AllocationPool`` can have multiple ``Allocations``.
  Which ``Allocations`` were used for this record?  Each ``Allocation`` has a
  different ``Grant``.  Each ``Grant`` can have a different ``Scheme``. We can
  only record one ``scheme`` however.

* Remove the ``description`` field.

Future work:

* How do we get these attributes? Do we need to de-normalize the ``CPUJob``
  tables too? How do we get these attributes when filling in the ``CPUJob``
  table? Will audit log provide us with this historic information?
  Currently the ``Person`` table doesn't have audit log enabled, required
  for ``person_institute`` and ``person_career_level``.

* We need to work out algorithm to get ``allocated_project`` from
  ``submitted_project``. See discussion under `allocation_mode attribute`_.

* We need to work out how to relate Schemes to Usage.

Git commits:

* `c7d4ad0c7cd8abdab37d973f64aa127b21ba66f7 <https://github.com/Karaage-Cluster/karaage/commit/c7d4ad0c7cd8abdab37d973f64aa127b21ba66f7>`_


Rationale - Pending
-------------------
This section documents the changes that have not yet been merged in Karaage 4
with the rationale as to why the changes have been considered a good idea.

.. contents:: :local:

PublicNotes model
~~~~~~~~~~~~~~~~~

.. code-block::

    @python_2_unicode_compatible
    class PublicNotes(models.Model):
        note = models.TextField()
        when = models.DateTimeField()
        content_type = models.ForeignKey(ContentType)
        object_id = models.PositiveIntegerField()
        content_object = GenericForeignKey('content_type', 'object_id')
        person = models.ForeignKey('karaage.Person')

        def __str__(self):
            return self.note

        class Meta:
            ordering = ['-when']


The idea of this table is to record *important* changes to the object
that is available to everyone who can see the object, not just administrators.

A better solution might be to define certain log entries as *important* and
allow everyone to view these log entries.

At present time only administrators can view the log list.

Gerrit change:

* `1476 <https://code.vpac.org/gerrit/#/c/1476/>`_


Group Parent
~~~~~~~~~~~~

.. code-block::

    class Group(models.Model):

        """
        Groups represent collections of people, these objects can be
        expressed externally in a datastore.

        Groups here are replicated to clusters as posix groups (/etc/groups) with
        their associated members.  Groups should relate to a parent which provides
        the motivation for having the group, for example members of a project
        should be members of the group associated with the project - the parent
        generic foreign key in this instance would refer to the project.

        The parent relationship also helps to avoid shadow namespacing issues where
        things like project PIDs and institute names are the same (think "RMIT").
        The application code is forced to resolve any naming conflicts, and group
        membership synchronisation issues are no longer possible.
        """
        name = models.CharField(max_length=255, unique=True, null=True)
        content_type = models.ForeignKey(ContentType, blank=True, null=True)
        object_id = models.PositiveIntegerField(blank=True, null=True)
        parent = GenericForeignKey('content_type', 'object_id')

        ...

This is a series of changes dependant based on the first change which adds a
parent field from every group to the object that used it. This duplicates the
OneToOneField as described in `Unique Groups`_.

In turn, this allows creating groups and picking a unique name automatically.

It also allows code to generate an error if the user attempts to modify the
groups directly instead of via the appropriate interface for the parent.

While these are required changes, work needs to be done to see if the same
results can be achieved without duplication of the data in the database.

Gerrit change:

* `1498 <https://code.vpac.org/gerrit/#/c/1498/>`_
* `1499 <https://code.vpac.org/gerrit/#/c/1499/>`_
* `1500 <https://code.vpac.org/gerrit/#/c/1500/>`_


CPUJob model
~~~~~~~~~~~~
Do we need to de-normalize the fields in CPUJob model. e.g. Add the following
fields:

.. code-block: python

    @python_2_unicode_compatible
    class CPUJob(models.Model):

        ...

        person_institute = models.ForeignKey(
            'karaage.Institute',
            related_name='person_institute_cpujob',
            null=True,  # legacy data doesn't have person project level
        )
        person_career_level = models.ForeignKey(
            'karaage.CareerLevel',
            null=True,  # legacy data doesn't have person career level
        )
        person_project_level = models.ForeignKey(
            'karaage.ProjectLevel',
            null=True,  # legacy data doesn't have person project level
        )
        project_institute = models.ForeignKey(
            'karaage.Institute',
            related_name='project_institute_cpujob',
            null=True,  # legacy data doesn't have person project level
        )

The downside of this change is that the migration to add the extra fields
is very slow, and this is before we even fill in the fields.

We can't automatically fill in ``person_career_level`` and ``person_project_level``
on upgrade, as we don't have this data. Should we attempt to fill in
``person_institute`` and ``project_institute``? We do have this data
available, however it may not be correct for the time the job  executed.

In theory, after migrating to Karaage4, we can look up this data at any time
using the django audit logs records. So processing (or reprocess) the usage
logs at any time (which do not contain this information) and this should
contain the correct value at the time the job was executed.


Example
-------
At a fictional site, we have the following machines:

* ``MachineCategory`` { name: default }
* ``Machine`` { name: brecca, machine_category: default }
* ``Machine`` { name: tango, machine_category: default }

We define the following projects:

* ``Project`` { pid: InstituteA }
* ``Project`` { pid: InstituteB }
* ``Project`` { pid: ProjectA, parent: InstituteA }
* ``Project`` { pid: ProjectB, parent: InstituteA }
* ``Project`` { pid: ProjectC, parent: InstituteC }
* ``Project`` { pid: ProjectD, parent: ProjectC }

This shows how the project hierarchy would work.

We want to track disk space and CPU hours, so we define two resource pools.

* ``ResourcePool`` { name: Disk Space }
* ``ResourcePool`` { name: CPU Hours }

We define the following resources:

* ``Resource`` { machine: brecca, resource_pool: Disk Space, quantity=??? }
* ``Resource`` { machine: brecca, resource_pool: CPU Hours, quantity=??? }
* ``Resource`` { machine: tango, resource_pool: Disk Space, quantity=??? }
* ``Resource`` { machine: tango, resource_pool: CPU Hours, quantity=??? }

For this fictional site, ET is the major sponsor, So we define the following
scheme:

* ``Scheme`` { name: ET, opened: 2100-01-01, closed=None }

ET has been generous enough to give Grants to various projects:

* ``Grant`` { id: 1, project: ProjectA, scheme: ET, begins: 2100-01-01, expires=2100-12-31 }
* ``Grant`` { id: 2, project: ProjectD, scheme: ET, begins: 2100-01-01, expires=2100-12-31 }

We define an ``AllocationPeriod``:

* ``AllocationPeriod`` { name: "2100Q1", start: 2100-01-01, end: 2100-03-31 }

At this stage we haven't defined the resources allocated for this project. Lets
do that:

* ``AllocationPool`` { name: "Q1PA", id: 1, project: ProjectA, period: 2100Q1, pool: Disk Space }

  * ``Allocation`` { grant: 1, allocation_pool: 1, quantity: 100KB }

* ``AllocationPool`` { name: "Q1PD", id: 2, project: ProjectD, period: 2100Q1, pool: CPU Hours }

   * ``Allocation`` { grant: 2, allocation_pool: 2, quantity: 10 }

Elliott decided to match these grants:

* ``Scheme`` { name: Elliott, opened: 2100-01-01, closed=None }
* ``Grant`` { id: 3, project: ProjectA, scheme: Elliott, begins: 2100-01-01, expires=2100-12-31 }
* ``Grant`` { id: 4, project: ProjectD, scheme: Elliott, begins: 2100-01-01, expires=2100-12-31 }

At this stage we already have the ``AllocationPool`` these projects. So we just need to
define additional ``Allocations``:

* ``Allocation`` { grant: 3, allocation_pool: 1, quantity: 500KB }
* ``Allocation`` { grant: 4, allocation_pool: 2, quantity: 50 }

Note that the two resource pools have different properties - CPU hours is
accumulative and each new entry will add to the previous total. Where as with
disk space, we are more concerned about the maximum about of disk space used
at any one time. The distinction between these two formats has not been made
in the current schema.

After some usage, the ``AllocationPools`` might look like this:

* ``AllocationPool`` { name: "Q1PA", id: 1, project: ProjectA, period: 2100Q1, pool: Disk Space }

  * ``Allocation`` { grant: 1, allocation_pool: 1, quantity: 100KB }
  * ``Allocation`` { grant: 3, allocation_pool: 1, quantity: 500KB }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-01", quantity: 0KB }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-02", quantity: 100KB }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-03", quantity: 100KB }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-04", quantity: 100KB }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-05", quantity: 100KB }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-06", quantity: 100KB }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-07", quantity: 100KB }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-08", quantity: 100KB }

  Note this ``Project`` has not exceeded the the 600KB quota despite the fact
  7*100KB = 700KB, as here the maximum value matters, not the total.

* ``AllocationPool`` { name: "Q1PD", id: 2, project: ProjectD, period: 2100Q1, pool: CPU Hours }

  * ``Allocation`` { grant: 2, allocation_pool: 2, quantity: 10 }
  * ``Allocation`` { grant: 4, allocation_pool: 2, quantity: 50 }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-01", quantity: 0 }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-02", quantity: 100 }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-03", quantity: 100 }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-04", quantity: 100 }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-05", quantity: 100 }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-06", quantity: 100 }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-07", quantity: 100 }
  * ``Usage`` { allocation_pool: 1, range_start="2100-01-08", quantity: 100 }

  In this case, the allocated quota of 60 has definitely been exceeded, as the
  total usage is 700.

Also note the following constraints:

* allocation.allocation_pool.project == allocation.grant.project


Future work
-----------
Future changes required:

* Investigate proposed changes to groups, see if this can be improved on.
* Import usage information into aggregated table.
* Migration to put usage information in new aggregated table.
* Rewrite usage plugin. New plugin should be able to graph data from multiple
  sources, e.g. CPU time and disk space.
* Write/complete user documentation.

Management changes:

* It has been suggested that a way forward would be to make Karaage
  proprietary. However Karaage has always been Open Source software and has had
  contributions from different sources. Changing this would be infeasible.

* Another option that has been suggested is to develop proprietary add on
  plugins for Karaage. This would limit the exposure of these plugins however,
  and likely to severely limit the user base for the plugin.

* V3 Alliance should be selling support contracts with every Karaage
  installation deployed. We should be ensuring that all Karaage installations
  are up-to-date with the latest stable release of Karaage, with latest
  security updates.

* Furthermore V3 Alliance should supply feature requests in exchange for
  funding for the development work required.
