KEP 1: KEP Purpose and Guidelines
=================================

:Created: 2014-06-30
:Author: Brian May
:Status: Draft

What is a KEP?
==============

KEP stands for Karaage Enhancement Proposal. A KEP is a design document
providing information to the Karaage community, or describing a new feature
or process for Karaage. KEPs provide concise technical specifications of
features, along with rationales.

We intend KEPs to be the primary mechanisms for proposing major new features,
for collecting community input on issues, and for documenting design
decisions that have gone into Karaage.

The concept of KEPs is a blatant copy of Python's PEPs
(http://www.python.org/dev/peps/) and Django DEPs
(https://github.com/django/deps).

Rationale
=========

We're introducing the concept of KEPs in Karaage because we expect it to
improve our process of adding medium-to-large features in the framework.

Our traditional development process for medium-to-large features has been
haphazard. Since the very first commit in 2008, developer communication and
planning of new features has been spread across these places:

* The Karaage mailing list
  (http://lists.vpac.org/cgi-bin/mailman/listinfo/karaage).

* Github issue tracker
  (https://github.com/Karaage-Cluster/karaage/issues).

* Gerrit
  (https://code.vpac.org/gerrit/)

* In person, generally at VPAC.

This scattered approach worked to some extent, but the problem is obvious:
when communication about a new Karaage feature happens in all of these different
ways, it's hard for an outsider to get a sense of the feature's scope and
rationale. And it's *very* hard for future developers to piece together
the original design decisions for a given piece of Karaage.

Another problem has been getting clear "problem definitions" for new features.
Often, feature proposals get batted around on the Karaage mailing
list, with various people contributing small pieces to the idea. This is a
wonderfully messy and open process, but it's hard to get a quick overview
of a feature without reading through entire mailing-list threads, reconciling
the many micro-decisions made in the discussion. A big benefit to KEPs is that
you'll not only see all the information in one place, you're also able to see
the evolution of the feature idea by inspecting the KEP's revision-control
history.

When to write a KEP
===================

Please understand this important point: KEPs are NOT bureaucracy for
bureaucracy's sake.

KEPs are for medium-to-large Karaage features. It's ultimately a judgment call,
but here are some examples of existing Karaage features/efforts that would
have required a KEP:

* Make Karaage Python3 compatable.

* Rewrite of the usage module.

* Changing the overall Karaage design.

* Changes that are break backwords compatability.

* Improving the Karaage authorization model.

Here are examples of that would *not* require a KEP:

* Fixing a bug.

* Changing some internal Karaage function to accept another argument for
  some edge case.

Use judgment. When in doubt, write a short KEP -- it shouldn't be much more
effort than writing a proposal to the django-developers mailing list.

Logistics
=========

Our process is intentionally lean at the moment, as we try to get it up and
running.

To submit a KEP, write a text document in the KEP format and submit it as a
pull request to the KEP GitHub repository
(https://github.com/Karaage-Cluster/keps).
Put it in the "drafts" directory of the repository and give it a short name
that describes the feature, e.g. "magic-removal.rst".

The KEP format is reStructuredText, with "Created," "Author" and "Status"
fields near the top. For example, look at the top of this document. "Status"
should be "Draft" to start.

Beyond that, a KEP should include the following sections:

* Overview. A sentence or short paragraph describing the feature.

* Rationale. A few paragraphs describing why this feature is needed
  and what specific problem(s) it solves.

* Implementation. A technical description of how this feature will
  be implemented. This may or may not include code snippets.

All KEPs will be considered licensed under terms and conditions of GPL3+, the
same license in use by Karaage itself.

Once you've written a KEP and submitted the pull request, post a message about
it to the Karaage mailing list. At that point, Karaage developers will
make sure it's technically feasible, not spam, etc., assign it a KEP number and
commit it to the repository as "Active." This doesn't mean the feature will be
implemented; it merely means the proposal is officially a DEP.
